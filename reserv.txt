## Homework

Представьте, что вы стажер в компании "Formatter Inc.".
### Задание 1
Вам поручили перейти на систему автоматизированной сборки **CMake**.
Исходные файлы находятся в директории [formatter_lib](formatter_lib).
В этой директории находятся файлы для статической библиотеки *formatter*.
Создайте `CMakeList.txt` в директории [formatter_lib](formatter_lib),
с помощью которого можно будет собирать статическую библиотеку *formatter*.

1. В папке formatter_lib создаём файл CMakeLists.txt с текстом:
```sh
cmake_minimum_required(VERSION 3.4)
project(formatter)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

add_library(formatter STATIC formatter.cpp)
```

### Задание 2
У компании "Formatter Inc." есть перспективная библиотека,
которая является расширением предыдущей библиотеки. Т.к. вы уже овладели
навыком созданием `CMakeList.txt` для статической библиотеки *formatter*, ваш
руководитель поручает заняться созданием `CMakeList.txt` для библиотеки
*formatter_ex*, которая в свою очередь использует библиотеку *formatter*.

1. Для удобства перемещаем папку formatter_lib в formatter_ex_lib.
2. В папке formatter_ex_lib создаём файл CMakeLists.txt с текстом:
```sh
cmake_minimum_required(VERSION 3.4)
project(formatter_ex)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include_directories(./formatter_lib)
add_subdirectory(./formatter_lib)

add_library(formatter_ex STATIC ./formatter_ex.cpp)

target_link_libraries(formatter_ex formatter)
```

### Задание 3
Конечно же ваша компания предоставляет примеры использования своих библиотек.
Чтобы продемонстрировать как работать с библиотекой *formatter_ex*,
вам необходимо создать два `CMakeList.txt` для двух простых приложений:
* *hello_world*, которое использует библиотеку *formatter_ex*;
* *solver*, приложение которое испольует статические библиотеки *formatter_ex* и *solv>

1. В папке solver_lib создаём файл CMakeLists.txt с текстом:
```sh
cmake_minimum_required(VERSION 3.4)
project(solver)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

add_library(solver STATIC solver.cpp)
```
2. В папке hello_world_application создаём файл CMakeLists.txt с текстом:
```sh
cmake_minimum_required(VERSION 3.4)
project(hello_world)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../formatter_ex_lib)

add_executable(hello_world hello_world.cpp)

target_link_libraries(hello_world formatter_ex)
```
3. В папке solver_application создаём файл CMakeLists.txt с текстом:
```sh
cmake_minimum_required(VERSION 3.4)
project(equasion)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../formatter_ex_lib ${CMAKE_CURRENT_SOURCE_DIR}/../solver_lib)

add_executable(equation equation.cpp)

target_link_libraries(equation formatter_ex solver)
```
4. В основной папке создаём файл CMakeLists.txt с текстом:
```sh
cmake_minimum_required(VERSION 3.4)
project(lab03)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

add_subdirectory(./formatter_ex_lib)
add_subdirectory(./solver_application)
add_subdirectory(./hello_world_application)
add_subdirectory(./solver_lib)
```
